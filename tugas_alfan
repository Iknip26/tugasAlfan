#include <string>
#include <iostream>

using namespace std;

class Robot
{
public:
    int x = 0, y = 0, countStep = 0;
    string direction = "up";

    void turnLeft()
    {
        if (direction == "up")
        {
            direction = "left";
        }
        else if (direction == "left")
        {
            direction = "down";
        }
        else if (direction == "down")
        {
            direction = "right";
        }
        else if (direction == "right")
        {
            direction = "up";
        }
        cout << "Robot Turn Left" << endl;
    }

    void turnRight()
    {
        if (direction == "up")
        {
            direction = "right";
        }
        else if (direction == "left")
        {
            direction = "up";
        }
        else if (direction == "down")
        {
            direction = "left";
        }
        else if (direction == "right")
        {
            direction = "down";
        }
        cout << "Robot Turn Right" << endl;
    }

    void Uturn()
    {
        if (direction == "up")
        {
            direction = "down";
        }
        else if (direction == "down")
        {
            direction = "up";
        }
        else if (direction == "left")
        {
            direction = "right";
        }
        else if (direction == "right")
        {
            direction = "left";
        }
        cout << "Robot doing U-turn" << endl;
    }

    void move(string moveDirection)
    {
        if (moveDirection == "up")
        {
            if (direction == "down")
            {
                Uturn();
            }
            else if (direction == "left")
            {
                turnRight();
            }
            else if (direction == "right")
            {
                turnLeft();
            }
            y--;
        }
        else if (moveDirection == "down")
        {
            if (direction == "up")
            {
                Uturn();
            }
            else if (direction == "right")
            {
                turnRight();
            }
            else if (direction == "left")
            {
                turnLeft();
            }
            y++;
        }
        else if (moveDirection == "left")
        {
            if (direction == "right")
            {
                Uturn();
            }
            else if (direction == "down")
            {
                turnRight();
            }
            else if (direction == "up")
            {
                turnLeft();
            }
            x--;
        }
        else if (moveDirection == "right")
        {
            if (direction == "left")
            {
                Uturn();
            }
            else if (direction == "up")
            {
                turnRight();
            }
            else if (direction == "down")
            {
                turnLeft();
            }
            x++;
        }
        cout << "robot move forward 1 meter" << endl;
    }

    void start_Robot()
    {
        direction = "up";
        y--;
        cout << "start_robot"
             << endl;
        cout << "Robot Moving Forward to Start Point\n"
             << endl;
    }

    void pathFind(int finishX, int finishY, int path[99][2])
    {
        countStep = 0;
        while (x != finishX && y != finishY)
        {
            if (rand() % 3 == 0 || rand() % 3 == 1)
            {
                if (x < finishX)
                {
                    move("right");
                }
                else
                {
                    move("left");
                }
            }
            else
            {
                if (y < finishY)
                {
                    move("down");
                }
                else
                {
                    move("up");
                }
            }
            path[countStep][0] = x;
            path[countStep][1] = y;
            countStep++;
        }

        while (x != finishX)
        {
            if (x < finishX)
            {
                move("right");
            }
            else
            {
                move("left");
            }
            path[countStep][0] = x;
            path[countStep][1] = y;
            countStep++;
        }

        while (y != finishY)
        {
            if (y < finishY)
            {
                move("down");
            }
            else
            {
                move("up");
            }
            path[countStep][0] = x;
            path[countStep][1] = y;
            countStep++;
        }
    }

    void pickupOrDrop(string direction, string instruction)
    {
        if (direction == "right")
        {
            if (this->direction == "left")
            {
                Uturn();
            }
            else if (this->direction == "up")
            {
                turnRight();
            }
            else if (this->direction == "down")
            {
                turnLeft();
            }
        }
        else if (direction == "left")
        {
            if (this->direction == "right")
            {
                Uturn();
            }
            else if (this->direction == "down")
            {
                turnRight();
            }
            else if (this->direction == "up")
            {
                turnLeft();
            }
        }
        if (instruction == "pick")
        {
            cout << "Box Have Been Picked Up\n"
                 << endl;
        }
        else
        {
            cout << "Succes Drop The Box\n"
                 << endl;
        }
    }
};

int main()
{
    Robot robot1;
    int startPoint[2] = {4, 7};
    int pickupZone[3][2] = {{7, 3}, {7, 4}, {7, 1}};

    int dropZone[5][2] = {{1, 2},
                          {1, 3},
                          {1, 4},
                          {1, 5},
                          {1, 8}};

    int pickupZoneDest, dropZoneDest, Combination;

    cout << "Choose Pickup Zone Destination : ";
    cin >> pickupZoneDest;
    pickupZoneDest--;
    cout << "\nChoose Drop Zone Destination : ";
    cin >> dropZoneDest;
    dropZoneDest--;
    cout << "\nChoose The Number of Combination : ";
    cin >> Combination;
    cout << "\nRobot Instructed from Pick Up Number " << pickupZoneDest + 1 << " to Drop Zone Number " << dropZoneDest + 1 << endl;

    for (int i = 0; i < Combination; i++)
    {
        int pickupPath[99][2], dropzonePath[99][2], pickupStep = 0, dropzoneStep = 0;
        robot1.x = startPoint[0];
        robot1.y = startPoint[1];

        cout << "\n\nKOMBINASI KE " << i + 1 << "\n"
             << endl;

        robot1.start_Robot();

        // Menuju ke pickup zone
        robot1.pathFind(pickupZone[pickupZoneDest][0], pickupZone[pickupZoneDest][1], pickupPath);
        pickupStep = robot1.countStep;
        robot1.pickupOrDrop("right", "pick");

        // Menuju ke drop zone
        robot1.pathFind(dropZone[dropZoneDest][0], dropZone[dropZoneDest][1], dropzonePath);
        dropzoneStep = robot1.countStep;
        robot1.pickupOrDrop("left", "drop");

        // Draw Path yang di lewatinya
        cout << "\n\nPATH MAP : \n"
             << endl;

        cout << "P = Pitch Stop \nS = Start Point \no = Path \nX = Pickup or Drop Zone\n"
             << endl;

        for (int j = 0; j < 9; j++)
        {
            for (int k = 0; k < 9; k++)
            {
                string obj = "empty";

                for (int l = 0; l < pickupStep; l++)
                {
                    if (j == pickupPath[l][1] && k == pickupPath[l][0])
                    {
                        obj = "path";
                    }
                }

                for (int m = 0; m < dropzoneStep; m++)
                {
                    if (j == dropzonePath[m][1] && k == dropzonePath[m][0])
                    {
                        obj = "path";
                    }
                }

                if ((j == pickupZone[pickupZoneDest][1] && k == (pickupZone[pickupZoneDest][0] + 1)) || (j == dropZone[dropZoneDest][1] && k == (dropZone[dropZoneDest][0] - 1)))
                {
                    obj = "zone";
                }
                else if ((j == startPoint[1] - 1 && k == startPoint[0]))
                {
                    obj = "start";
                }
                else if ((j == startPoint[1] && k == startPoint[0]))
                {
                    obj = "pitch";
                }

                if (obj == "path")
                {
                    cout << "o ";
                }
                else if (obj == "zone")
                {
                    cout << "X ";
                }
                else if (obj == "empty")
                {
                    cout << "- ";
                }
                else if (obj == "pitch")
                {
                    cout << "P ";
                }
                else if (obj == "start")
                {
                    cout << "S ";
                }
            }
            cout << endl;
        }
        cout << "\n=======================================\n\n"
             << endl;
    }
};
